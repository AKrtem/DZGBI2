import { $authHost, $host } from "./index";
import jwt_decode from "jwt-decode";

export const registration = async (email, password) => {
  const { data } = await $host.post("api/user/registration", {
    email,
    password,
    // –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª—å ‚Äî —Å–µ—Ä–≤–µ—Ä —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç USER –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  });
  localStorage.setItem("token", data.token);
  return jwt_decode(data.token);
};

export const login = async (email, password) => {
  const { data } = await $host.post("api/user/login", { email, password });
  localStorage.setItem("token", data.token);
  return jwt_decode(data.token);
};

export const check = async () => {
  const { data } = await $authHost.get("api/user/auth");
  console.log("üî• check() –ø–æ–ª—É—á–∏–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
  if (!data.token) {
    console.error("‚ùå check(): –û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç { token }, –∞ –ø–æ–ª—É—á–µ–Ω–æ:", data);
    throw new Error("Invalid token format in server response");
  }

  localStorage.setItem("token", data.token);
  const decoded = jwt_decode(data.token);
  console.log("üì¶ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ check():", decoded); // <--- –¥–æ–±–∞–≤—å —ç—Ç–æ
  return decoded;
};
